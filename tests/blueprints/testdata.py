"""
Data copied from version 5.1 of the DST exel sheet.
"""

# (no. participants, duration, scope) -> complexity grade
COMPLEXITY = {
    'AC': [
        ((0, 0, 0), 0),
        ((0, 0, 1), 1),
        ((0, 0, 2), 1),
        ((0, 1, 0), 1),
        ((0, 1, 1), 2),
        ((0, 1, 2), 2),
        ((0, 2, 0), 2),
        ((0, 2, 1), 3),
        ((0, 2, 2), 3),
        ((1, 0, 0), 1),
        ((1, 0, 1), 1),
        ((1, 0, 2), 2),
        ((1, 1, 0), 2),
        ((1, 1, 1), 2),
        ((1, 1, 2), 3),
        ((1, 2, 0), 3),
        ((1, 2, 1), 3),
        ((1, 2, 2), 4),
        ((2, 0, 0), 1),
        ((2, 0, 1), 2),
        ((2, 0, 2), 2),
        ((2, 1, 0), 2),
        ((2, 1, 1), 3),
        ((2, 1, 2), 3),
        ((2, 2, 0), 3),
        ((2, 2, 1), 4),
        ((2, 2, 2), 4),
    ],
    'BD': [
        ((0, 0, 0), 0),
        ((0, 0, 1), 1),
        ((0, 0, 2), 2),
        ((0, 1, 0), 1),
        ((0, 1, 1), 2),
        ((0, 1, 2), 3),
        ((0, 2, 0), 2),
        ((0, 2, 1), 3),
        ((0, 2, 2), 4),
        ((1, 0, 0), 1),
        ((1, 0, 1), 2),
        ((1, 0, 2), 3),
        ((1, 1, 0), 2),
        ((1, 1, 1), 3),
        ((1, 1, 2), 4),
        ((1, 2, 0), 3),
        ((1, 2, 1), 4),
        ((1, 2, 2), 5),
        ((2, 0, 0), 2),
        ((2, 0, 1), 3),
        ((2, 0, 2), 4),
        ((2, 1, 0), 3),
        ((2, 1, 1), 4),
        ((2, 1, 2), 5),
        ((2, 2, 0), 4),
        ((2, 2, 1), 5),
        ((2, 2, 2), 6),
    ],
    # modified E because due to error version 5.1 of exel sheet
    'E': [
        ((0, 0, 0), 0),
        ((0, 0, 1), 0),
        ((0, 0, 2), 1),
        ((0, 1, 0), 0),
        ((0, 1, 1), 0),
        ((0, 1, 2), 1),
        ((0, 2, 0), 0),
        ((0, 2, 1), 0),
        ((0, 2, 2), 1),
        ((1, 0, 0), 0),
        ((1, 0, 1), 1),
        ((1, 0, 2), 1),
        ((1, 1, 0), 0),
        ((1, 1, 1), 1),
        ((1, 1, 2), 1),
        ((1, 2, 0), 0),
        ((1, 2, 1), 1),
        ((1, 2, 2), 1),
        ((2, 0, 0), 1),
        ((2, 0, 1), 1),
        ((2, 0, 2), 1),
        ((2, 1, 0), 1),
        ((2, 1, 1), 1),
        ((2, 1, 2), 1),
        ((2, 2, 0), 1),
        ((2, 2, 1), 1),
        ((2, 2, 2), 1),
    ],
    # original data for complexity of E
    # 'E': [
    #     ((0, 0, 0), 0),
    #     ((0, 0, 1), 0),
    #     ((0, 0, 2), 1),
    #     ((0, 1, 0), 0),
    #     ((0, 1, 1), 0),
    #     ((0, 1, 2), 1),
    #     ((0, 2, 0), 0),
    #     ((0, 2, 1), 0),
    #     ((0, 2, 2), 1),
    #     ((1, 0, 0), 0),
    #     ((1, 0, 1), 0),
    #     ((1, 0, 2), 1),
    #     ((1, 1, 0), 0),
    #     ((1, 1, 1), 0),
    #     ((1, 1, 2), 1),
    #     ((1, 2, 0), 0),
    #     ((1, 2, 1), 0),
    #     ((1, 2, 2), 1),
    #     ((2, 0, 0), 1),
    #     ((2, 0, 1), 1),
    #     ((2, 0, 2), 2),
    #     ((2, 1, 0), 1),
    #     ((2, 1, 1), 1),
    #     ((2, 1, 2), 2),
    #     ((2, 2, 0), 1),
    #     ((2, 2, 1), 1),
    #     ((2, 2, 2), 2),
    # ],
    'F': [
        ((0, 0, 0), 1),
        ((0, 0, 1), 1),
        ((0, 0, 2), 1),
        ((0, 1, 0), 2),
        ((0, 1, 1), 2),
        ((0, 1, 2), 2),
        ((0, 2, 0), 3),
        ((0, 2, 1), 3),
        ((0, 2, 2), 3),
        ((1, 0, 0), 2),
        ((1, 0, 1), 2),
        ((1, 0, 2), 2),
        ((1, 1, 0), 3),
        ((1, 1, 1), 3),
        ((1, 1, 2), 3),
        ((1, 2, 0), 4),
        ((1, 2, 1), 4),
        ((1, 2, 2), 4),
        ((2, 0, 0), 3),
        ((2, 0, 1), 3),
        ((2, 0, 2), 3),
        ((2, 1, 0), 4),
        ((2, 1, 1), 4),
        ((2, 1, 2), 4),
        ((2, 2, 0), 5),
        ((2, 2, 1), 5),
        ((2, 2, 2), 5),
    ],
}

# (motivation, accessibillity) -> dedication
DEDICATION = [
    ((1, 1), 1),
    ((1, 2), 2),
    ((1, 3), 2),
    ((1, 4), 3),
    ((2, 1), 2),
    ((2, 2), 2),
    ((2, 3), 3),
    ((2, 4), 3),
    ((3, 1), 2),
    ((3, 2), 3),
    ((3, 3), 3),
    ((3, 4), 4),
    ((4, 1), 3),
    ((4, 2), 3),
    ((4, 3), 4),
    ((4, 4), 4),
]

# (grade of complexity, dedication, experience) -> time needed
TIME_NEEDED = [
    ((0, 4, 4), 5),
    ((0, 4, 3), 5),
    ((0, 4, 2), 5),
    ((0, 4, 1), 5),
    ((0, 3, 4), 5),
    ((0, 3, 3), 5),
    ((0, 3, 2), 5),
    ((0, 3, 1), 5),
    ((0, 2, 4), 5),
    ((0, 2, 3), 5),
    ((0, 2, 2), 5),
    ((0, 2, 1), 5),
    ((0, 1, 4), 5),
    ((0, 1, 3), 5),
    ((0, 1, 2), 5),
    ((0, 1, 1), 5),
    ((1, 4, 4), 10),
    ((1, 4, 3), 10),
    ((1, 4, 2), 5),
    ((1, 4, 1), 5),
    ((1, 3, 4), 10),
    ((1, 3, 3), 5),
    ((1, 3, 2), 5),
    ((1, 3, 1), 5),
    ((1, 2, 4), 5),
    ((1, 2, 3), 5),
    ((1, 2, 2), 5),
    ((1, 2, 1), 5),
    ((1, 1, 4), 5),
    ((1, 1, 3), 5),
    ((1, 1, 2), 5),
    ((1, 1, 1), 5),
    ((2, 4, 4), 15),
    ((2, 4, 3), 15),
    ((2, 4, 2), 10),
    ((2, 4, 1), 10),
    ((2, 3, 4), 15),
    ((2, 3, 3), 10),
    ((2, 3, 2), 10),
    ((2, 3, 1), 5),
    ((2, 2, 4), 10),
    ((2, 2, 3), 10),
    ((2, 2, 2), 5),
    ((2, 2, 1), 5),
    ((2, 1, 4), 10),
    ((2, 1, 3), 5),
    ((2, 1, 2), 5),
    ((2, 1, 1), 5),
    ((3, 3, 4), 20),
    ((3, 4, 4), 20),
    ((3, 4, 3), 20),
    ((3, 4, 2), 15),
    ((3, 4, 1), 10),
    ((3, 3, 3), 15),
    ((3, 3, 2), 10),
    ((3, 3, 1), 10),
    ((3, 2, 4), 15),
    ((3, 2, 3), 10),
    ((3, 2, 2), 10),
    ((3, 2, 1), 5),
    ((3, 1, 4), 10),
    ((3, 1, 3), 10),
    ((3, 1, 2), 5),
    ((3, 1, 1), 5),
    ((4, 4, 4), 30),
    ((4, 4, 3), 25),
    ((4, 4, 2), 20),
    ((4, 4, 1), 15),
    ((4, 3, 4), 25),
    ((4, 3, 3), 20),
    ((4, 3, 2), 15),
    ((4, 3, 1), 10),
    ((4, 2, 4), 20),
    ((4, 2, 3), 15),
    ((4, 2, 2), 10),
    ((4, 2, 1), 10),
    ((4, 1, 4), 15),
    ((4, 1, 3), 10),
    ((4, 1, 2), 10),
    ((4, 1, 1), 5),
    ((5, 4, 4), 30),
    ((5, 4, 3), 30),
    ((5, 4, 2), 25),
    ((5, 4, 1), 20),
    ((5, 3, 4), 30),
    ((5, 3, 3), 25),
    ((5, 3, 2), 20),
    ((5, 3, 1), 15),
    ((5, 2, 4), 25),
    ((5, 2, 3), 20),
    ((5, 2, 2), 15),
    ((5, 2, 1), 10),
    ((5, 1, 4), 20),
    ((5, 1, 3), 15),
    ((5, 1, 2), 10),
    ((5, 1, 1), 5),
    ((6, 4, 4), 35),
    ((6, 4, 3), 30),
    ((6, 4, 2), 30),
    ((6, 4, 1), 25),
    ((6, 3, 4), 30),
    ((6, 3, 3), 30),
    ((6, 3, 2), 25),
    ((6, 3, 1), 20),
    ((6, 2, 4), 30),
    ((6, 2, 3), 25),
    ((6, 2, 2), 20),
    ((6, 2, 1), 15),
    ((6, 1, 4), 25),
    ((6, 1, 3), 20),
    ((6, 1, 2), 15),
    ((6, 1, 1), 10),
    ((7, 4, 4), 40),
    ((7, 4, 3), 35),
    ((7, 4, 2), 30),
    ((7, 4, 1), 30),
    ((7, 3, 4), 35),
    ((7, 3, 3), 30),
    ((7, 3, 2), 30),
    ((7, 3, 1), 20),
    ((7, 2, 4), 30),
    ((7, 2, 3), 30),
    ((7, 2, 2), 20),
    ((7, 2, 1), 15),
    ((7, 1, 4), 30),
    ((7, 1, 3), 20),
    ((7, 1, 2), 15),
    ((7, 1, 1), 10),
    ((8, 4, 4), 40),
    ((8, 4, 3), 40),
    ((8, 4, 2), 35),
    ((8, 4, 1), 30),
    ((8, 3, 4), 40),
    ((8, 3, 3), 35),
    ((8, 3, 2), 30),
    ((8, 3, 1), 25),
    ((8, 2, 4), 35),
    ((8, 2, 3), 30),
    ((8, 2, 2), 25),
    ((8, 2, 1), 15),
    ((8, 1, 4), 30),
    ((8, 1, 3), 25),
    ((8, 1, 2), 15),
    ((8, 1, 1), 10),
]


def time_needed_oracle(
        process, participants, duration, scope,
        motivation, accessibility, experience
):
    # undo encoding change that was required to easy implementation
    motivation = 5 - motivation
    experience = 5 - experience

    complexity = dict(COMPLEXITY[process])[(participants, duration, scope)]
    dedication = dict(DEDICATION)[(motivation, accessibility)]
    time_needed = dict(TIME_NEEDED)[(complexity, dedication, experience)]

    return time_needed
